name: CI

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  code-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"] # Run linting only on latest stable version

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python environment
        run: |
          uv python install ${{ matrix.python-version }}
          uv venv --python ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          uv pip install -r requirements-dev.txt
          uv pip install pre-commit

      - name: Set Python path
        run: echo "PYTHONPATH=${{ github.workspace }}" >> $GITHUB_ENV

      - name: Cache pre-commit hooks
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run pre-commit checks
        run: |
          uv run pre-commit run --all-files

  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up virtualenv
        run: |
          uv python install 3.12
          uv venv --python 3.12

      - name: Check dependency resolution
        run: |
          uv pip compile requirements.txt --output-file=requirements.check.txt
          echo "Dependencies resolved successfully"

      - name: Security audit
        run: |
          uv pip install safety
          uv run safety check --json

  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python environment
        run: |
          uv venv --system

      - name: Install dependencies
        run: |
          uv pip install -r requirements-dev.txt

      - name: Set Python path
        run: echo "PYTHONPATH=${{ github.workspace }}" >> $GITHUB_ENV

      - name: Run tests & collect coverage
        run: |
          uv run pytest --cov=. --cov-report=xml -v --tb=short

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            .pytest_cache/
            test-reports/
          retention-days: 7

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: coverage.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: coverage.xml
          retention-days: 7

  integration-test:
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up virtualenv
        run: |
          uv python install 3.12
          uv venv --python 3.12

      - name: Install dependencies
        run: |
          uv pip install -r requirements-dev.txt

      - name: Run integration tests
        run: |
          uv run python main.py https://github.com/pallets/flask --mode clone
        env:
          # Add any environment variables needed for integration tests
          PYTHONPATH: ${{ github.workspace }}

  build-test:
    runs-on: ubuntu-latest
    needs: [unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Clean old builds
        run: |
          rm -rf dist/

      - name: Set up virtualenv
        run: |
          uv python install 3.12
          uv venv --python 3.12

      - name: Install build dependencies
        run: |
          uv pip install build wheel

      - name: Build package
        run: |
          uv run python -m build

      - name: Check package
        run: |
          uv pip install twine
          uv run twine check dist/*

      - name: Test installation
        run: |
          uv pip install dist/*.whl
          python -c "import gitsage; print('Package imports successfully')"
